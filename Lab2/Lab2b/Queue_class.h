#include "Header.h"

template <class T>
class Queue {
	


	//////////////////////////
	//  переменные очереди  //
	//////////////////////////

	/* начало очереди */
	Elem <T>* beginning;
	/* конец очереди */
	Elem<T>* end;
	/* размер очереди */
	int size;
	/* расположение для сохранения и открытия */
	string Fpath;

	//////////////////////////



	/////////////////////////
	//  сеттеры и геттеры  //
	/////////////////////////
	
	/* вернуть начало */
	void Beginning(Elem<T>* elmnt) { beginning = elmnt; };
	/* вернуть конец */
	void End(Elem<T>* elmnt) { end = elmnt; };
	/* вернуть размер */
	void Size(const int & size0) { size = size0; };
	/* задать начало */
	Elem<T>* Beginning() { return beginning; };
	/* зажать конец */
	Elem<T>* End() { return end; };

	/////////////////////////

	

	////////////////////////////////////
	//  методы проверки и заполнения  //
	////////////////////////////////////

	/* проверка на пустоту */
	bool Empty() { return (beginning == nullptr) && (end == nullptr); };
	/* метод проверки пути к таблицы */
	bool CheckFpath() {
		return Fpath == "" || Fpath.find(".txt") == string::npos;
	};
	/* проверить и установить путь */
	void SetPath(const string & path = "") {
		Fpath = path;
		bool check = CheckFpath();
		while (check) {
			cout << "Введите путь: ";
			getline(cin, Fpath);
			if (CheckFpath()) {
				check = true;
				cout << "Путь был введен неправильно" << endl;
			}
			else check = false;
		}
	};
	/* заполнение элемента по указателю */
	void Ffe(Elem<T>* elmnt);

	////////////////////////////////////



	////////////////////////////
	//  работа с указателями  //
	////////////////////////////

	/* вставить в очередь */
	Elem<T>* Enque();
	/* удалить из очереди */
	void Deque();
	/* очистить очередь */
	void Clear();
	/* поиск максимального и минимального */
	Elem<T>* MaxMin(const bool& max);
	/* поиск по индексу */
	Elem<T>* Find(const int & val);

	////////////////////////////



public:



	//////////////////////////////////
	//  конструкторы и деструкторы  //
	//////////////////////////////////

	/* конструктор по умолчанию */
	Queue()
	{
		size = 0;
		beginning = nullptr;
		end = nullptr;
		Fpath = "";
	};
	/* открытие таблицы */
	Queue(const bool open): Queue{} {
		if (open) {
			Open();
		}
	};
	/* заполнение случайной информацией из файла */
	Queue(const int& size0) : Queue{}
	{
		for (int i = 0; i < size0; i++)
			Ffe(Enque());
	};
	/* деструктор */
	~Queue()
	{
		Clear();
	};

	//////////////////////////////////



	/////////////////////////
	//  методы по заданию  //
	/////////////////////////

	/* показать содержимое и количество элементов */
	void Show();
	/* вычислить среднее арифметическое */
	T Average();
	/* распечатать минимальный или максимальный элемент */
	void PrintMinMax();
	/* распечатать предыдущий минимального */
	void PrintMinPrev();

	/////////////////////////



    ////////////////////////////////////
	//  методы общей работы с файлом  //
	////////////////////////////////////

	/* сохранить */
	void Save();
	/* открыть */
	void Open();
	/* проверить сохранение */
	bool SavedCheck();

	////////////////////////////////////



	//////////////
	//  другое  //
	//////////////

	/* размер */
	int Size() { return size; };
	/* создать заданное количество элементов */
	void Create(const int& size0);

	//////////////



};