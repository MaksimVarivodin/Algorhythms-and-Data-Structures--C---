#pragma once
#include "Header.h"

template<class T>
class List
{

	//////////////////////////////////////////////////
    //       переменные управляющего списка         //
    //////////////////////////////////////////////////

	/* начало списка "голова", "корень" */
	Elem<T>* head;

	/* конец списка "хвост" */
	Elem<T>* tail;

	/* буферный указатель (для удобного пользования) */
	Elem<T>* buf;

	/* количество экземпляров */
	int size;

	/* расположение для сохранения и открытия */
	string Fpath;

	//////////////////////////////////////////////////



	/////////////////////////////////////////////////////////////////////////////
	//       методы работающие с доступом к элементам и их количеством         //
	/////////////////////////////////////////////////////////////////////////////

	/* получение размера */
	int Size() { return size; };

	/* оператор ищет элемент с номером указанным в качестве агрумента */
	Elem<T>* operator[](const int& number);

	/////////////////////////////////////////////////////////////////////////////


	
	///////////////////////////////////////////////////
	//       методы работающие с указателями         //
	///////////////////////////////////////////////////

	/* метод обмена двух элементов */
	void SwapPointers(Elem<T>* a, Elem<T>* b);

	/* метод(алгоритм) добавления одного элемента в любое место списка */
	Elem<T>* AddElement(Elem<T>* current);

	/* метод(алгоритм) удаления одного элемента из любого места списка */
	Elem<T>* DelElement(Elem<T>* current);

	/* метод работы с алгоритмом добавления */
	bool InnerAdd(const int& pos, const int& kol, const int& meth);

	/* метод работы с алгоритмом удаления */
	bool InnerDel(const int& pos, const int& kol);

	/////////////////////////////////////////////////



	/////////////////////////////////////////////////////
	//       методы для заполнения информацией         //
	/////////////////////////////////////////////////////

	/* fill from file - заполнение из файла */
	void Fff(Elem<T>* ToFill);

	/* метод корректного ввода */
	template<typename t1, typename t2>
	friend  void Enter_check(t1& a, const t2& max, const t2& min);

	/* метод корректного ввода пути к таблице */
	void SetPath(const string& path = "");

	/////////////////////////////////////////////////////



	///////////////////////////////////
	//       методы проверок         //
	///////////////////////////////////

	/* метод проверки пути к таблицы */
	bool CheckFpath() {
		return Fpath == "" || Fpath.find(".txt") == string::npos;
	};

	/* метод проверки на пустоту */
	bool Empty() {
		return size == 0 && head == nullptr && tail == nullptr;
	};

	///////////////////////////////////

public:



    //////////////////////////////////////////////
    //       конструкторы и деструкторы         //
    //////////////////////////////////////////////

	/* конструктор для открытия таблицы */
	List(const bool & open = false)
	{
		head = nullptr;
		tail = nullptr;
		buf = nullptr;
		size = 0;
		Fpath = "";
		if (open) {
			Open();
			Fpath = "data.txt";
		}	
	};
	
	/* конструктор копирования */
	List(const List<T>& other) : List{} {
		Fpath = other.Fpath;
		Elem<T>* buffer = other.head;
		for (int i = 0; i < other.size; i++) {
			buf = AddElement(buf);
			buf->Paste(*buffer);
			buf->Index(size);
			buffer = buffer->Next();
		}
	};
	~List()
	{
		
		while (size > 0) {
			Elem<T>* buffer = head;
			head = head->Next();
			if(buffer != nullptr)
			buffer->~Elem();
			size--;
		}
		//cout << "dctor List" << endl;
	};
	//////////////////////////////////////////////



	///////////////////////////////////////////////
	//       методы требуемые по заданию         //
	///////////////////////////////////////////////

	/* Добавить элементы */
	bool FrontAdd();

	/* Удалить элементы */
	bool FrontDel();

	/* Показать количество элементов */
	void Show(const bool & choice = true);

    /* Поменять два элемента местами */
	bool Swap();

	/* Создать новый список и объединить его с текущим */
	List<T>& operator+=(const List<T>& other);

	/* Очистить список */
	bool Clear();

	///////////////////////////////////////////////



	/////////////////////////////////////////
	//       дополнительные методы         //
	/////////////////////////////////////////

	/* Информация о разработчике */
	void Info();

	/* Открытие таблицы */
	bool Open();

	/* Сохранение таблицы */
	bool Save();

    /* проверка и исправление номеров элементов списка */
	void Renumb();

	/* проверка сохранения таблицы */
	bool SavedCheck();

	/////////////////////////////////////////

};
